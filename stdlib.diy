;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))

;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.

(define or
    (lambda (a b)
        (if a a b)))

(define and
    (lambda (a b)
        (if a
            (if b a b)
            a)))

(define xor
    (lambda (a b)
        (if (eq a b) #f #t)))

(define >=
    (lambda (a b)
        (if (or (> a b) 
                (eq a b))
            #t
            #f)))

(define <=
    (lambda (a b)
        (not (> a b))))

(define <
    (lambda (a b)
        (> b a)))

;(define reduce 
;    (lambda (fn elems initial_value)
;        (if (empty elems)
;            initial_value
;            (fn (head elems)  
; TODO - make sum and length use reduce
        

(define sum
    (lambda (elems)
        (if (empty elems)
            0
            (+ (head elems) (sum (tail elems))))))

(define length
    (lambda (elems)
        (if (empty elems)
            0
            (+ 1 (length (tail elems))))))

